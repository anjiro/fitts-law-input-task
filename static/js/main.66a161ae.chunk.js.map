{"version":3,"sources":["components/About.js","components/Login.js","components/Demo.js","components/Navbar.js","App.js","index.js"],"names":["About","className","target","rel","href","alt","src","Component","Login","props","onChange","e","setState","name","value","username","state","device","Form","onSubmit","this","Row","Group","as","Col","md","controlId","Label","Control","required","type","placeholder","defaultValue","Feedback","selected","disabled","hidden","Demo","resetTest","isPractice","sequences","PracticeSequences","TestSequences","isActive","isComplete","generated","results","currentSequenceIndex","currentRepetition","currentCircleIndex","previousCircleIndex","generateCircleData","getResults","generateCsvFromResultLogs","csv","Object","keys","join","map","l","values","csvData","Blob","FileSaver","saveAs","Date","now","toString","resumeTest","restartTimer","pauseTest","completeTest","startTime","performance","timeElapsed","stopTimer","onLoginDetailsChange","loginData","skipPractice","escPressed","keyCode","calculateDistance","x1","x2","y1","y2","deltaX","deltaY","Math","sqrt","onClick","d","i","hit","si","c","x","circles","y","p","container","clientWidth","clientHeight","distanceFromPrevious","s","appendResultLog","circlePathDiamater","radius","direction","round","count","repetitions","length","renderCircles","sequence","rep","time","existingLog","modifiedResults","timestamp","misses","id","log2","ip","prevState","inSequence","rev","PI","center","Array","fill","_","rotationOffset","cos","sin","color","activeColor","d3","remove","attr","on","stopPropagation","selectAll","data","enter","append","document","addEventListener","removeEventListener","statusBarStyle","width","height","position","zIndex","right","left","top","padding","fontWeight","margin","maxWidth","maxHeight","overflow","backgroundColor","fontSize","Fragment","Modal","centered","keyboard","show","onHide","backdrop","Header","Title","Body","Footer","Button","variant","ref","style","bottom","min","Navbar","to","App","basename","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.66a161ae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class About extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container py-5\">\r\n                <h1>Fitt's Law Demo</h1>\r\n                <hr/>\r\n                <p className=\"text-justify\">\r\n                    This application was created to test Fitt's law, by collecting data of user input in two dimensions. \r\n                    It does so by prompting the user to click or tap several sequences of circles as highlighted and logging the accuracy and time taken to select each circle. \r\n                    This data is then made available to the user at the end of the test via a CSV file.\r\n                    For more information, feel free to contact me via my social accounts.\r\n                </p>\r\n                <hr/>\r\n                <p>Built with React, D3, and FileShare by Vishnu Gunapathi.</p>\r\n                <hr/>\r\n                <div className=\"icon-container\">\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/twinji\">\r\n                        <img alt=\"GitHub\" src=\"https://raw.githubusercontent.com/twinji/twinji/master/icons/github.svg\"/>\r\n                    </a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.instagram.com/_twinji/\">\r\n                        <img alt=\"Instagram\" src=\"https://raw.githubusercontent.com/twinji/twinji/master/icons/instagram.svg\"/>\r\n                    </a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/twinji/\">\r\n                        <img alt=\"LinkedIn\" src=\"https://raw.githubusercontent.com/twinji/twinji/master/icons/linkedin.svg\"/>\r\n                    </a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/_twinji\">\r\n                        <img alt=\"Twitter\" src=\"https://raw.githubusercontent.com/twinji/twinji/master/icons/twitter.svg\"/>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport PropTypes from 'prop-types';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport class Login extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            device: ''\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ \r\n            [e.target.name]: e.target.value \r\n        }, () => {\r\n            this.props.onChange({\r\n                username: this.state.username,\r\n                device: this.state.device\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.onSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\" controlId=\"loginForm.ControlInputUsername\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            placeholder=\"Username\"\r\n                            name=\"username\"\r\n                            defaultValue=\"\"\r\n                            onChange={this.onChange}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter your username\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\" controlId=\"loginForm.ControlInputDevice\">\r\n                        <Form.Label>Device</Form.Label>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            defaultValue=\"\" \r\n                            required \r\n                            onChange={this.onChange}\r\n                            name=\"device\"\r\n                        >\r\n                            <option value=\"\" selected disabled hidden>Select a device</option>\r\n                            <option value=\"mouse\">Mouse</option>\r\n                            <option value=\"trackpad\">Trackpad</option>\r\n                            <option value=\"touchscreen\">Touchscreen</option>\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please select your input device\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Login from './Login';\r\nimport FileSaver from 'file-saver';\r\nimport TestSequences from '../data/test_sequences.json';\r\nimport PracticeSequences from '../data/practice_sequences.json';\r\n\r\nexport class Demo extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            isActive: false,\r\n            isComplete : false,\r\n            isPractice: null,\r\n            username: '',\r\n            device: '',\r\n            sequences: null,\r\n            generated: [],\r\n            results: [],\r\n            currentSequenceIndex: 0,\r\n            currentRepetition: 1,\r\n            currentCircleIndex: 0,\r\n            previousCircleIndex: null\r\n        }\r\n    }\r\n\r\n    resetTest = () => {\r\n\r\n        let isPractice = this.state.isPractice == null ? true : !this.state.isPractice;\r\n        this.setState({\r\n            isPractice,\r\n            sequences: isPractice ? PracticeSequences : TestSequences,\r\n            username: '',\r\n            device: '',\r\n            isActive: false,\r\n            isComplete: false,\r\n            generated: [],\r\n            results: [],\r\n            currentSequenceIndex: 0,\r\n            currentRepetition: 1,\r\n            currentCircleIndex: 0,\r\n            previousCircleIndex: null\r\n        }, () => {\r\n            this.generateCircleData();\r\n        });\r\n    }\r\n\r\n    getResults = () => {\r\n        this.generateCsvFromResultLogs();\r\n    }\r\n    \r\n    generateCsvFromResultLogs = () => {\r\n        const csv = Object.keys(this.state.results[0]).join(',') + '\\n'\r\n            + this.state.results.map(l => Object.values(l).join(',')).join('\\n');\r\n\r\n        const csvData = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n        FileSaver.saveAs(csvData, this.state.username + '_' + this.state.device + '_fitts_law_results_' + Date.now().toString() + '.csv');\r\n    }\r\n    \r\n    resumeTest = () => {\r\n        this.setState({\r\n            isActive: true,\r\n            previousCircleIndex: null\r\n        });\r\n        this.restartTimer();\r\n    }\r\n\r\n    pauseTest = () => {\r\n        this.setState({\r\n            isActive: false\r\n        });\r\n    }\r\n\r\n    completeTest = () => {\r\n        this.setState({\r\n            isActive: false,\r\n            isComplete: true\r\n        }, () => {\r\n            if (!this.state.isPractice)\r\n                this.getResults();\r\n        });\r\n    }\r\n\r\n    restartTimer = () => {\r\n        this.startTime = performance.now();\r\n        this.timeElapsed = null;\r\n    }\r\n\r\n    stopTimer = () => {\r\n        this.timeElapsed = performance.now() - this.startTime;\r\n    }\r\n\r\n    onLoginDetailsChange = (loginData) => {\r\n        this.setState({\r\n            username: loginData.username,\r\n            device: loginData.device\r\n        })\r\n    }\r\n\r\n    skipPractice = () => {\r\n        if (this.state.isPractice) {\r\n            this.setState({\r\n                isActive: false,\r\n                isPractice: false,\r\n                sequences: TestSequences\r\n            }, () => {\r\n                this.generateCircleData();\r\n            });\r\n        }\r\n    }\r\n\r\n    escPressed = (e) => {\r\n        if (e.keyCode === 27) {\r\n            this.skipPractice();\r\n        }\r\n    }\r\n\r\n    calculateDistance = (x1, x2, y1, y2) => {\r\n        let deltaX = x2 - x1;\r\n        let deltaY = y2 - y1;\r\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    }\r\n\r\n    onClick = (d, i) => {\r\n\r\n        if (!this.state.isActive)\r\n            return;\r\n\r\n        let hit = i === this.state.currentCircleIndex;\r\n        if (hit) this.stopTimer();\r\n\r\n        let si = this.state.currentSequenceIndex;\r\n        let c = {\r\n            x: this.state.generated[si].circles[this.state.currentCircleIndex].x,\r\n            y: this.state.generated[si].circles[this.state.currentCircleIndex].y\r\n        };\r\n        let p = this.state.previousCircleIndex !== null ? {\r\n            x: this.state.generated[si].circles[this.state.previousCircleIndex].x,\r\n            y: this.state.generated[si].circles[this.state.previousCircleIndex].y\r\n        } : {\r\n            x: this.container.clientWidth / 2,\r\n            y: this.container.clientHeight / 2\r\n        };\r\n\r\n        let distanceFromPrevious = this.calculateDistance(c.x, p.x, c.y, p.y);\r\n\r\n        const s = this.state.sequences[si];\r\n\r\n        this.appendResultLog(\r\n            this.state.username,\r\n            this.state.device,\r\n            this.state.currentSequenceIndex + 1,\r\n            this.state.currentRepetition,\r\n            s.circlePathDiamater,\r\n            distanceFromPrevious,\r\n            s.radius,\r\n            s.direction,\r\n            hit,\r\n            this.timeElapsed\r\n        );\r\n\r\n        if (hit) {\r\n            let currentSequenceIndex = this.state.currentSequenceIndex;\r\n            let s = this.state.sequences[currentSequenceIndex];\r\n            let previousCircleIndex = this.state.currentCircleIndex;\r\n            let currentCircleIndex = (this.state.currentCircleIndex + Math.round(s.count / 2)) % s.count;\r\n            let currentRepetition = this.state.currentRepetition + 1;\r\n            let isComplete = false;\r\n\r\n            if (currentRepetition > s.repetitions) {\r\n                currentRepetition = 1;\r\n                currentCircleIndex = 0;\r\n                currentSequenceIndex++;\r\n\r\n                if (currentSequenceIndex >= this.state.sequences.length) {\r\n                    this.completeTest();\r\n                    isComplete = true;\r\n                } else {\r\n                    this.pauseTest();\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                currentCircleIndex,\r\n                currentRepetition,\r\n                currentSequenceIndex,\r\n                previousCircleIndex\r\n            }, () => {\r\n                if (!isComplete) {\r\n                    this.renderCircles();\r\n                    this.restartTimer();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    appendResultLog = (username, device, sequence, rep, circlePathDiamater, distanceFromPrevious, radius, direction, hit, time) => {\r\n\r\n        let existingLog = false;\r\n        var modifiedResults = this.state.results.map(l => {\r\n            if (l.username === username && l.device === device && l.sequence === sequence && l.rep === rep) {\r\n                existingLog = true;\r\n                l.timestamp = Date.now();\r\n                if (!hit) {\r\n                    l.misses++;\r\n                } else {\r\n                    l.hit = hit;\r\n                    l.time = this.timeElapsed;\r\n                }\r\n            }\r\n            return l;\r\n        });\r\n\r\n        if (existingLog) {\r\n            this.setState({\r\n                results: modifiedResults\r\n            });\r\n        } else {\r\n\r\n            let id = Math.log2(distanceFromPrevious / (radius * 2));\r\n            let ip = id / time;\r\n\r\n            this.setState(prevState => ({\r\n                results: [...prevState.results, {\r\n                    username, \r\n                    device, \r\n                    sequence, \r\n                    rep, \r\n                    circlePathDiamater,\r\n                    distanceFromPrevious, \r\n                    radius,\r\n                    id,\r\n                    ip,\r\n                    direction, \r\n                    hit, \r\n                    time, \r\n                    misses: hit ? 0 : 1, \r\n                    timestamp: Date.now()\r\n                }]\r\n            }));\r\n        }\r\n    }\r\n\r\n    inSequence = () => {\r\n        return this.state.currentSequenceIndex > 0 && !this.state.isComplete;\r\n    }\r\n    \r\n    generateCircleData = () => {\r\n\r\n        this.setState({\r\n            generated: this.state.sequences.map((s) => {\r\n                \r\n                let rev = Math.PI * 2;\r\n                let center = {\r\n                    x: this.container.clientWidth / 2,\r\n                    y: this.container.clientHeight / 2\r\n                }\r\n\r\n                return {\r\n                    circles: Array(s.count).fill().map((_, i) => {\r\n                        let rotationOffset = Math.PI * 1.5;\r\n                        return {\r\n                            x: center.x + Math.cos(rotationOffset + i * (rev / s.count)) * s.circlePathDiamater / 2,\r\n                            y: center.y + Math.sin(rotationOffset + i * (rev / s.count)) * s.circlePathDiamater / 2,\r\n                            radius: s.radius,\r\n                            color: 'lightgray',\r\n                            activeColor: 'crimson'\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }, this.renderCircles);\r\n    }\r\n\r\n    renderCircles = () => {\r\n\r\n        d3.selectAll(\"svg > *\").remove();\r\n        \r\n        let svgContainer = d3\r\n            .select(\"#demoContainer > svg\")\r\n            .attr(\"width\", this.container.clientWidth)\r\n            .attr(\"height\", this.container.clientHeight)\r\n            .on(\"click\", e => {\r\n                d3.event.stopPropagation();\r\n                this.onClick(null, -1);\r\n            });\r\n\r\n        let circles = svgContainer\r\n            .selectAll(\"circle\")\r\n            .data(this.state.generated[this.state.currentSequenceIndex].circles)\r\n            .enter()\r\n            .append(\"circle\");\r\n\r\n        circles\r\n            .attr(\"cx\", d => d.x)\r\n            .attr(\"cy\", d => d.y)\r\n            .attr(\"r\", d => d.radius)\r\n            .attr(\"fill\", (d, i) => i === this.state.currentCircleIndex ? d.activeColor : d.color)\r\n            .on(\"click\", (d, i) => {\r\n                d3.event.stopPropagation();\r\n                this.onClick(d, i);\r\n            });\r\n    }\r\n    \r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.escPressed, false);\r\n        this.resetTest();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.escPressed, false);\r\n    }\r\n\r\n    render() {\r\n\r\n        const containerStyle = {\r\n            width: 'auto',\r\n            height: 'auto',\r\n            position: 'fixed',\r\n            zIndex: -99,\r\n            right: 0, left: 0, top: 0, bottom: 0,\r\n            margin: 'auto',\r\n            maxWidth: '100%',\r\n            maxHeight: '100%',\r\n            overflow: 'visible',\r\n        }\r\n\r\n        const statusBarStyle = {\r\n            width: 'auto',\r\n            height: 'auto',\r\n            position: 'absolute',\r\n            zIndex: -100,\r\n            right: 0, left: 0, top: 55,\r\n            padding: 6,\r\n            fontWeight: 'bold',\r\n            margin: 'auto',\r\n            maxWidth: '100%',\r\n            maxHeight: '100%',\r\n            overflow: 'visible',\r\n            backgroundColor: this.state.isPractice ? 'orange' : 'lightblue',\r\n            color: 'white',\r\n            fontSize: '20px',\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Modal centered keyboard={false} show={!this.state.isActive} onHide={this.resumeTest} backdrop=\"static\">\r\n                    <Modal.Header>\r\n                        {\r\n                            (this.inSequence() || this.state.isComplete) &&\r\n                            <Modal.Title>\r\n                                {this.state.isPractice ? 'Practice sequence' : 'Sequence'} {this.state.currentSequenceIndex} out of {this.state.sequences.length} complete\r\n                            </Modal.Title>\r\n                        }\r\n                        {              \r\n                            !this.inSequence() && !this.state.isComplete &&\r\n                            <Modal.Title>\r\n                                Fitt's law demo\r\n                            </Modal.Title>\r\n                        }\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {\r\n                            !this.inSequence() && !this.state.isComplete && <Login onChange={this.onLoginDetailsChange}/>\r\n                        }\r\n                        { \r\n                            this.inSequence() ? \r\n                                'Take a break and proceed to the next sequence when you are ready.' : \r\n                                    (this.state.isComplete ? (this.state.isPractice ? 'You have completed the practice run, click below to continue.' : 'You have completed this demo, click below to view results.') : \r\n                                        'Select the red circles as they appear as quickly as possible to the best of your ability.') \r\n                        }\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        {\r\n                            !this.state.isComplete &&\r\n                            <React.Fragment>\r\n                                <Button variant=\"primary\" onClick={this.resumeTest} disabled={!this.state.username || !this.state.device}>\r\n                                    { this.inSequence() ? 'Proceed' : (this.state.isPractice ? 'Begin practice' : 'Begin test')  }\r\n                                </Button>\r\n                            </React.Fragment>\r\n                        }\r\n                        {\r\n                            (this.state.isComplete && this.state.isPractice) && \r\n                            <React.Fragment>\r\n                                <Button variant=\"secondary\" onClick={this.resetTest}>\r\n                                    Continue\r\n                                </Button>\r\n                            </React.Fragment>\r\n                        }\r\n                        {\r\n                            (this.state.isComplete && !this.state.isPractice) && \r\n                            <React.Fragment>\r\n                                <Button variant=\"secondary\" onClick={this.resetTest}>\r\n                                    Retry demo\r\n                                </Button>\r\n                                <Button variant=\"primary\" onClick={this.getResults}>\r\n                                    Get results\r\n                                </Button>\r\n                            </React.Fragment>\r\n                        }\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <div id=\"demoContainer\" ref={ container => this.container = container } style={containerStyle}>\r\n                    {\r\n                        this.state.sequences !== null &&\r\n                        <span style={statusBarStyle}>\r\n                            {this.state.isPractice ? 'Practice sequence' : 'Sequence'}\r\n                            &nbsp;\r\n                            {Math.min(this.state.currentSequenceIndex + 1, this.state.sequences.length)}/{this.state.sequences.length}\r\n                            </span>\r\n                    }\r\n                    <svg></svg>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Demo\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light rounded\">\r\n                <div className=\"container py-0 my-0\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">Fitts' Law Demo</Link>\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link text-dark\" to=\"/about\">About</Link>\r\n                    </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport About from './components/About';\nimport Demo from './components/Demo';\nimport Navbar from './components/Navbar';\n\n\nexport default function App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\">\n            <Demo/>\n          </Route>\n          <Route path=\"/about\">\n            <About/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}